{% set name = "scs" %}
{% set version = "2.1.1-2" %}
{% set sha256 = "f816cfe3d4b4cff3ac2b8b96588c5960ddd2a3dc946bda6b09db04e7bc6577f2" %}

package:
  name: {{ name|lower }}
  version: "{{ version|replace('-', '.') }}"  # 2.1.1-2 => 2.1.1.2

source:
  fn: {{ name }}-{{ version }}.tar.gz
  url: https://pypi.io/packages/source/{{ name[0] }}/{{ name }}/{{ name }}-{{ version }}.tar.gz
  sha256: {{ sha256 }}

  patches:
    - long_int_type.patch

build:
  # noarch_python: True
  # preserve_egg_dir: True
  # entry_points:
    # Put any entry points (scripts to be generated automatically) here. The
    # syntax is module:function.  For example
    #
    # - scs = scs:main
    #
    # Would create an entry point called scs that calls scs.main()


  # If this is a new build for the same version, increment the build
  # number. If you do not include this key, it defaults to 0.
  number: 2
  script: {{ PYTHON }} -m pip install --no-deps --ignore-installed . -vv

requirements:
  build:
    - {{ compiler('c') }}
  host:
    - python
    - pip
    - setuptools
    - numpy
    - blas=*=mkl
  run:
    - python
    - {{ pin_compatible('numpy') }}
    - blas=*=mkl
    - scipy >=0.13.2

test:
  # Python imports
  imports:
    - scs
    - _scs_direct
    - _scs_indirect
  requires:
    - nose
  source_files:
    - test/
  commands:
    - nosetests test

about:
  home: http://github.com/cvxgrp/scs
  license: MIT
  license_family: MIT
  license_file: LICENSE
  summary: 'Python interface for SCS, which solves convex cone problems'
  description: |
    Solves convex cone programs via operator splitting.
    Can solve: linear programs (LPs), second-order cone programs (SOCPs),
    semidefinite programs (SDPs), exponential cone programs (ECPs),
    and power cone programs (PCPs), or problems with any combination of
    those cones.
  doc_url: https://github.com/bodono/scs-python
  dev_url: https://github.com/bodono/scs-python

# See
# http://docs.continuum.io/conda/build.html for
# more information about meta.yaml
